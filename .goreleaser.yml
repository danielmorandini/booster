build:
  main: cmd/booster/main.go
  binary: booster
  goos:
    - darwin
    - linux
    - windows
    - freebsd
    - netbsd
    - openbsd
    - dragonfly
  goarch:
    - amd64
    - 386
    - arm
    - arm64
  goarm:
    - 6
    - 7
  ldflags: -s -w -X main.Version={{.Version}} -X main.BuildTime={{.Date}}

archive:
  replacements:
    amd64: 64bit
    386: 32bit

sign:
   artifacts: checksum

brew:
  # Reporitory to push the tap to.
  github:
    owner: danielmorandini
    name: homebrew-tap

  # Git author used to commit to the repository.
  # Defaults are shown.
  commit_author:
    name: danielmorandini
    email: danielmorandini@me.com

  # Folder inside the repository to put the formula.
  # Default is the root folder.
  folder: Formula

  # Your app's homepage.
  # Default is empty.
  homepage: "https://booster.tecnoporto.co/"

  # Your app's description.
  # Default is empty.
  description: "peer-to-peer network interface balancer"

  skip_upload: false

snapcraft:
  # Replacements for GOOS and GOARCH in the package name.
  # Keys should be valid GOOSs or GOARCHs.
  # Values are the respective replacements.
  # Default is empty.
  replacements:
    amd64: 64-bit
    386: 32-bit

  # Single-line elevator pitch for your amazing snap.
  # 79 char long at most.
  summary: peer-to-peer network interface balancer

  # This the description of your snap. You have a paragraph or two to tell the
  # most important story about your snap. Keep it under 100 words though,
  # we live in tweetspace and your description wants to look good in the snap
  # store.
  description: |
    peer-to-peer network interface balancer

  # A guardrail to prevent you from releasing a snap to all your users before
  # it is ready.
  # `devel` will let you release only to the `edge` and `beta` channels in the
  # store. `stable` will let you release also to the `candidate` and `stable`
  # channels. More info about channels here:
  # https://snapcraft.io/docs/reference/channels
  grade: devel

  # Snaps can be setup to follow three different confinement policies:
  # `strict`, `devmode` and `classic`. A strict confinement where the snap
  # can only read and write in its own namespace is recommended. Extra
  # permissions for strict snaps can be declared as `plugs` for the app, which
  # are explained later. More info about confinement here:
  # https://snapcraft.io/docs/reference/confinement
  confinement: strict
  apps:

    # The name of the app must be the same name as the binary built.
    booster:

      # If your app requires extra permissions to work outside of its default
      # confined space, declare them here.
      # You can read the documentation about the available plugs and the
      # things they allow:
      # https://snapcraft.io/docs/reference/interfaces).
      plugs: ["network", "network-bind"]
