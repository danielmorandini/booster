// Code generated by protoc-gen-go. DO NOT EDIT.
// source: payload.proto

package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PayloadHello struct {
	// bport is the booster listening port.
	Bport string `protobuf:"bytes,1,opt,name=bport" json:"bport,omitempty"`
	// pport is the proxy listening port.
	Pport string `protobuf:"bytes,2,opt,name=pport" json:"pport,omitempty"`
}

func (m *PayloadHello) Reset()                    { *m = PayloadHello{} }
func (m *PayloadHello) String() string            { return proto.CompactTextString(m) }
func (*PayloadHello) ProtoMessage()               {}
func (*PayloadHello) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PayloadHello) GetBport() string {
	if m != nil {
		return m.Bport
	}
	return ""
}

func (m *PayloadHello) GetPport() string {
	if m != nil {
		return m.Pport
	}
	return ""
}

type PayloadConnect struct {
	// target of the connect procedure.
	Target string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
}

func (m *PayloadConnect) Reset()                    { *m = PayloadConnect{} }
func (m *PayloadConnect) String() string            { return proto.CompactTextString(m) }
func (*PayloadConnect) ProtoMessage()               {}
func (*PayloadConnect) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PayloadConnect) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type PayloadNode struct {
	// id is the identifier of the node. Usually a sha1 hash.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// baddr is the booster listening address.
	Baddr string `protobuf:"bytes,2,opt,name=baddr" json:"baddr,omitempty"`
	// paddr is the proxy listening address.
	Paddr string `protobuf:"bytes,3,opt,name=paddr" json:"paddr,omitempty"`
	// active tells the connection state of the node.
	Active bool `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	// tunnels are the proxy tunnels managed by this node.
	Tunnels []*PayloadNode_Tunnel `protobuf:"bytes,5,rep,name=tunnels" json:"tunnels,omitempty"`
}

func (m *PayloadNode) Reset()                    { *m = PayloadNode{} }
func (m *PayloadNode) String() string            { return proto.CompactTextString(m) }
func (*PayloadNode) ProtoMessage()               {}
func (*PayloadNode) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *PayloadNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PayloadNode) GetBaddr() string {
	if m != nil {
		return m.Baddr
	}
	return ""
}

func (m *PayloadNode) GetPaddr() string {
	if m != nil {
		return m.Paddr
	}
	return ""
}

func (m *PayloadNode) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *PayloadNode) GetTunnels() []*PayloadNode_Tunnel {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

type PayloadNode_Tunnel struct {
	// id is the tunnel identifier. Usally a sha1 hash.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// target is the remote endpoint address of the tunnel.
	Target string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	// acks is the number of acknoledgments on this tunnel.
	Acks int32 `protobuf:"varint,3,opt,name=acks" json:"acks,omitempty"`
	// copies are the replications of this tunnel.
	Copies int32 `protobuf:"varint,4,opt,name=copies" json:"copies,omitempty"`
}

func (m *PayloadNode_Tunnel) Reset()                    { *m = PayloadNode_Tunnel{} }
func (m *PayloadNode_Tunnel) String() string            { return proto.CompactTextString(m) }
func (*PayloadNode_Tunnel) ProtoMessage()               {}
func (*PayloadNode_Tunnel) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

func (m *PayloadNode_Tunnel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PayloadNode_Tunnel) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *PayloadNode_Tunnel) GetAcks() int32 {
	if m != nil {
		return m.Acks
	}
	return 0
}

func (m *PayloadNode_Tunnel) GetCopies() int32 {
	if m != nil {
		return m.Copies
	}
	return 0
}

func init() {
	proto.RegisterType((*PayloadHello)(nil), "internal.PayloadHello")
	proto.RegisterType((*PayloadConnect)(nil), "internal.PayloadConnect")
	proto.RegisterType((*PayloadNode)(nil), "internal.PayloadNode")
	proto.RegisterType((*PayloadNode_Tunnel)(nil), "internal.PayloadNode.Tunnel")
}

func init() { proto.RegisterFile("payload.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4b, 0x04, 0x31,
	0x10, 0x85, 0xd9, 0xbd, 0xdb, 0xf5, 0x9c, 0xd3, 0x2b, 0x82, 0x1c, 0x8b, 0x58, 0x2c, 0x5b, 0x6d,
	0xb5, 0x85, 0x82, 0x85, 0xad, 0x8d, 0x95, 0x48, 0xb0, 0xb4, 0xc9, 0x6d, 0x06, 0x09, 0x86, 0x4c,
	0xc8, 0x46, 0xc1, 0x5f, 0x6e, 0x2b, 0x37, 0x49, 0xf0, 0xc0, 0x2e, 0xef, 0xcb, 0x9b, 0xbc, 0x79,
	0x81, 0x4b, 0xaf, 0xbe, 0x2d, 0x29, 0x3d, 0xf9, 0x40, 0x91, 0xc4, 0xc6, 0xb8, 0x88, 0xc1, 0x29,
	0x3b, 0x3c, 0xc0, 0xc5, 0x4b, 0xba, 0x7a, 0x42, 0x6b, 0x49, 0x5c, 0x41, 0x73, 0xf0, 0x14, 0x62,
	0x57, 0xf5, 0xd5, 0x78, 0x2e, 0x93, 0x38, 0x52, 0xcf, 0xb4, 0x4e, 0x94, 0xc5, 0x30, 0xc2, 0x2e,
	0xcf, 0x3e, 0x92, 0x73, 0x38, 0x47, 0xb1, 0x87, 0x36, 0xaa, 0xf0, 0x8e, 0x65, 0x3c, 0xab, 0xe1,
	0xa7, 0x82, 0x6d, 0xb6, 0x3e, 0x93, 0x46, 0xb1, 0x83, 0xda, 0xe8, 0xec, 0xa9, 0x8d, 0xe6, 0x54,
	0xa5, 0x75, 0x28, 0xef, 0xb3, 0xe0, 0x54, 0xa6, 0xab, 0x9c, 0xca, 0x74, 0x0f, 0xad, 0x9a, 0xa3,
	0xf9, 0xc2, 0x6e, 0xdd, 0x57, 0xe3, 0x46, 0x66, 0x25, 0xee, 0xe1, 0x2c, 0x7e, 0x3a, 0x87, 0x76,
	0xe9, 0x9a, 0x7e, 0x35, 0x6e, 0x6f, 0x6f, 0xa6, 0xd2, 0x72, 0x3a, 0xc9, 0x9e, 0x5e, 0xd9, 0x24,
	0x8b, 0xf9, 0xfa, 0x0d, 0xda, 0x84, 0xfe, 0x6d, 0xf5, 0xd7, 0xa6, 0x3e, 0x6d, 0x23, 0x04, 0xac,
	0xd5, 0xfc, 0xb1, 0xf0, 0x5a, 0x8d, 0xe4, 0xf3, 0xd1, 0x3b, 0x93, 0x37, 0xb8, 0xf0, 0x56, 0x8d,
	0xcc, 0xea, 0xd0, 0xf2, 0x87, 0xdf, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x76, 0x79, 0x72, 0x78,
	0x81, 0x01, 0x00, 0x00,
}
